length(which(zipcodes == "21231"))
DT <- fread("commserv.csv")
sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time(for i in (1:1000) {sapply(split(DT$pwgtp15,DT$SEX),mean)})
system.time(for (i in 1:1000) {sapply(split(DT$pwgtp15,DT$SEX),mean)})
system.time(for (i in 1:1000) {sapply(split(DT$pwgtp15,DT$SEX),mean)})
system.time(for (i in 1:10000) {sapply(split(DT$pwgtp15,DT$SEX),mean)})
DT[,mean(pwgtp15),by=SEX]
system.time(for (i in 1:10000) {DT[,mean(pwgtp15),by=SEX]})
mean(DT$pwgtp15,by=DT$SEX)
sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time(for (i in 1:10000) {sapply(split(DT$pwgtp15,DT$SEX),mean)})
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
sum(idaho$VAL == 24, na.rm=TRUE)
sum(dat$Zip*dat$Ext, na.rm=TRUE)
length(which(zipcodes == "21231"))
tapply(DT$pwgtp15,DT$SEX,mean)
system.time(for (i in 1:10000) {tapply(DT$pwgtp15,DT$SEX,mean)})
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(for (i in 1:10000) {mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)})
mean(DT$pwgtp15,by=DT$SEX)
sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time(for (i in 1:10000) {sapply(split(DT$pwgtp15,DT$SEX),mean)})
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
DT[,mean(pwgtp15),by=SEX]
system.time(for (i in 1:10000) {DT[,mean(pwgtp15),by=SEX]})
document <- fromJSON(txt="https://api.github.com/users/jtleek/repos")
library(jsonlite)
document <- fromJSON(txt="https://api.github.com/users/jtleek/repos")
document
head(document)
tail(json)
tail(document)
colnames(document)
document$created_by
document$created_at
document$name
datasharing <- document$datasharing
datasharing
datasharing <- document[5]
datasharing
datasharing <- document[,5]
datasharing
str(document)
datasharing <- subset(document, name == "datsharing")
datashraing
datasharing
head(datasharing)
datasharing <- subset(document, name == "datasharing")
head(datasharing)
datasharing$created_at
library(dplyr)
install.packages("dplyr")
library(dplyr)
head(q3gdp)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile="q3gdp.csv")
q3gdp <- read.csv("q3gdp.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="q3edu.csv")
q3edu <- read.csv("q3edu.csv")
head(q3gdp)
head(q3edu)
str(q3gdp)
str(q3edu)
names(q3gdp)
str(q3edu)
q3Country <- inner_join(q3gdp, d3edu, by = c("x" = "CountryCode") )
q3Country <- inner_join(q3gdp, q3edu, by = c("x" = "CountryCode") )
q3gdp$x
q3gdp$X
q3Country <- inner_join(q3gdp, q3edu, by = c("X" = "CountryCode") )
q3Country
head(q3Country)
nrows(q3Country)
nrow(q3Country)
q3Country <- inner_join(q3gdp, q3edu, by = c("X" = "CountryCode") )
q3Country$X
str(q3Country)
arrange(q3Country, desc(Gross.domestic.product.2012))
head(q3Country)
arrange(q3Country, desc(Gross.domestic.product.2012))
head(q3Country)
q3Country <- arrange(q3Country, desc(Gross.domestic.product.2012))
head(q3Country)
q3Country[13,]
q3Country[13,2]
q3Country[13,]
rows(q3Country)
nrows(q3Country)
nrow(q3Country)
str(q3Country)
q3Country[13,1]
nrow(q3Country)
head(q3gdp)
q3edu <- q3edu[q3edu != "",]
head(q3edu)
q3gdp <- q3gdp[q3gdp != "",]
q3edu <- q3edu[q3edu != "",]
head(q3edu)
q3Country <- inner_join(q3gdp, q3edu, by = c("X" = "CountryCode") )
nrow(q3Country)
q3gdp <- read.csv("q3gdp.csv")
q3gdp <- q3gdp[q3gdp$X != " & a3gep$Gross.domestic.product.2012 != "",]
q3gdp <- q3gdp[q3gdp$X != " & q3gep$Gross.domestic.product.2012 != "",]
q3gdp <- q3gdp[q3gdp$X != " & q3gep$Gross.domestic.product.2012 != "",]
q3gdp <- q3gdp[q3gdp$X != " & q3gep$Gross.domestic.product.2012 != "",]
head(q3gdp)
q3gdp <- q3gdp[q3gdp$X != " & is.numeric(q3gep$Gross.domestic.product.2012) == TRUE,]
q3gdp <- q3gdp[q3gdp$X != " & is.numeric(q3gep$Gross.domestic.product.2012) == TRUE,]
q3gdp <- q3gdp[q3gdp$X != "" & is.numeric(q3gep$Gross.domestic.product.2012) == TRUE,]
q3gdp <- q3gdp[q3gdp$X != "" & is.numeric(q3gdp$Gross.domestic.product.2012) == TRUE,]
head(q3gdp)
q3gdp <- read.csv("q3gdp.csv")
q3gdp <- q3gdp[q3gdp$X != " & is.numeric(q3gep$Gross.domestic.product.2012) == TRUE,]
q3gdp <- q3gdp[q3gdp$X != "" & is.numeric(q3gep$Gross.domestic.product.2012) == TRUE,]
q3gdp <- q3gdp[q3gdp$X != "" & is.numeric(q3gep$Gross.domestic.product.2012) == TRUE,]
q3gdp <- q3gdp[q3gdp$X != "" & is.numeric(q3gep$Gross.domestic.product.2012) == TRUE,]
q3gdp <- q3gdp[q3gdp$X != "" & is.numeric(q3gdp$Gross.domestic.product.2012) == TRUE,]
head(q3gdp)
q3gdp <- read.csv("q3gdp.csv")
q3gdp <- q3gdp[q3gdp$X != "",]
head(q3gdp)
q3gdp <- q3gdp[is.numeric(q3gdp$Gross.domestic.product.2012) == TRUE,]
head(q3gdp)
q3gdp <- read.csv("q3gdp.csv")
q3gdp
head(q3gdp)
str(q3gdp)
q3gdp <- read.csv("q3gdp.csv")
q3gdp$Gross.domestic.product.2012
is.numeric(q3gdp$Gross.domestic.product.2012)
is.numeric(q3gdp[,2])
is.numeric(q3gdp[2,])
q3gdp <- q3gdp[q3gdp$X != "" & q3gdp$Gross.domestic.product.2012 != ""]
q3gdp <- q3gdp[q3gdp$X != "" & q3gdp[,2] != ""]
q3gdp <- q3gdp[q3gdp$X != "" & q3gdp[,2] != ""]
names(q3gdp)
q3gdp <- q3gdp[q3gdp$X != "" & q3gdp$"Gross.domestic.product.2012 != ""]
q3gdp <- q3gdp[q3gdp$X != "" & q3gdp$"Gross.domestic.product.2012 != ""]
q3gdp <- q3gdp[q3gdp$X != "" & q3gdp$"Gross.domestic.product.2012" != ""]
q3gdp <- q3gdp[q3gdp$X != "" & q3gdp$Gross.domestic.product.2012 != ""]
q3gdp <- q3gdp[q3gdp$X != "" & q3gdp$Gross.domestic.product.2012 != ""]
q3gdp[,2]
q3gdp[q3gdp$X != "" & q3gdp[,2] != ""]
q3gdp[q3gdp[,2] != ""]
which(q3gdp[,2] != "")
q3gdp <- q3gdp[which(q3gdp$X != "" & q3gdp[,2] != ""),]
q3gdp
q3edu <- read.csv("q3edu.csv")
q3edu <- q3edu[q3edu$CountryCode != "",]
head(q3edu)
tail(q3edu)
q3Country <- inner_join(q3gdp, q3edu, by = c("X" = "CountryCode") )
nrow(q3Country)
q3Country <- arrange(q3Country, desc(Gross.domestic.product.2012))
q3Country[13,1]
head(q3Country, 13)
q3Country <- arrange(q3Country, desc(as.numeric(Gross.domestic.product.2012))
q3Country <- arrange(q3Country, desc(as.numeric(Gross.domestic.product.2012))
q3Country <- arrange(q3Country, desc(as.numeric(Gross.domestic.product.2012)))
q3Country[13,1]
class(q3Country$Gross.domestic.product.2012)
class(as.numeric(q3Country$Gross.domestic.product.2012))
q3gdp$rank <- as.numeric(q3.gdp$Gross.domestic.product.2012)
q3gdp$rank <- as.numeric(q3gdp$Gross.domestic.product.2012)
q3gdp$rank
q3Country <- inner_join(q3gdp, q3edu, by = c("X" = "CountryCode") )
q3Country$rank <- arrange(q3Country, desc(rank))
q3Country[13,1]
head(q3Country)
q3gdp <- read.csv("q3gdp.csv")
q3gdp <- q3gdp[which(q3gdp$X != "" & q3gdp[,2] != ""),]
str(q3gdp)
q3gdp$rank <- as.numeric(q3gdp$Gross.domestic.product.2012)
str(q3gdp)
q3edu <- read.csv("q3edu.csv")
q3edu <- q3edu[q3edu$CountryCode != "",]
q3Country <- inner_join(q3gdp, q3edu, by = c("X" = "CountryCode") )
nrow(q3Country)
q3Country <- arrange(q3Country, desc(rank))
q3Country[13,1]
head(q3Country)
class(q3Country$rank)
q3gdp$rank <- as.integer(q3gdp$Gross.domestic.product.2012)
q3Country <- arrange(q3Country, desc(rank))
q3Country[13,1]
q3gdp$rank
q3Country$rank
head(q3Country)
head(q3Country, 13)
q3gdp$rank <- as.integer(q3gdp$Gross.domestic.product.2012)
q3Country <- inner_join(q3gdp, q3edu, by = c("X" = "CountryCode") )
q3Country <- arrange(q3Country, desc(rank))
head(q3Country, 13)
head(q3gdp, 13)
q3gdp <- read.csv("q3gdp.csv")
q3gdp <- q3gdp[which(q3gdp$X != "" & q3gdp[,2] != ""),]
q3gdp$rank <- as.integer(q3gdp$Gross.domestic.product.2012)
head(q3gdp, 13)
q3gdp$rank <- as.integer(q3gdp[,2])
head(q3gdp, 13)
q3gdp$nrank <- as.integer(q3gdp[,2])
head(q3gdp, 13)
q3gdp$rank <- q3gdp$Gross.domestic.product.2012
head(q3gdp, 13)
q3gdp$rank <- as.integer(q3gdp$rank)
head(q3gdp, 13)
q3gdp$Gross.domestic.product.2012 <- as.integer(q3gdp$Gross.domestic.product.2012)
head(q3gdp, 13)
q3gdp <- read.csv("q3gdp.csv")
q3gdp <- q3gdp[which(q3gdp$X != "" & q3gdp[,2] != ""),]
class(q3gdp$Gross.domestic.product.2012)
head(q3gdp)
q3gdp$Gross.domestic.product.2012 <- as.integer(q3gdp$Gross.domestic.product.2012)
head(q3gdp)
q3gdp <- read.csv("q3gdp.csv")
q3gdp <- q3gdp[which(q3gdp$X != "" & q3gdp[,2] != ""),]
head(q3gdp)
q3Country <- inner_join(q3gdp, q3edu, by = c("X" = "CountryCode") )
q3Country <- arrange(q3Country, desc(Gross.domestic.product.2012))
q3Country[13,1]
head(q3gdp)
head(q3Country)
q3Country <- arrange(q3Country, desc(Gross.domestic.product.2012))
head(q3Country)
q3Country$Gross.domestic.product.2012
q3gdp <- read.csv("q3gdp.csv")
q3gdp <- q3gdp[which(q3gdp$X != "" & q3gdp[,2] != ""),]
q3gdp <- mutate(q3gdp, nrank = as.integer(Gross.domestic.product.2012))
head(q3gdp)
q3gdp <- mutate(q3gdp, nrank = Gross.domestic.product.2012 - 0)
q3gdp <- mutate(q3gdp, nrank = as.integer(as.character(Gross.domestic.product.2012)))
head(q3gdp)
q3Country <- inner_join(q3gdp, q3edu, by = c("X" = "CountryCode") )
nrow(q3Country)
q3Country <- arrange(q3Country, desc(nrank))
q3Country[13,1]
q3CountryHi = filter(q3Country, Income.Group == "High income: OECD")
q3CountryHi
q3Country.Hi.OECD = filter(q3Country, Income.Group == "High income: OECD")
q3Country.Hi.nonOECD = filter(q3Country, Income.Group == "High income: nonOECD")
head(q3Country.Hi.OECD)
head(q3Country.Hi.nonOECD)
mean(q3Country.Hi.OECD$nrank)
mean(q3Country.Hi.nonOECD$nrank)
tapply(q3Country$nrank,q3Country$Income.Group,sum)
tapply(q3Country$nrank,q3Country$Income.Group,average)
tapply(q3Country$nrank,q3Country$Income.Group,ave)
q3Country$cuts <- cut(q3Country$nrank,breaks=quantile(q3Country$nrank))
head(q3Country)
q3Country$cuts
q5 <- table(q3Country$cuts, q3Country$nrank)
q5
q5 <- table(q3Country$cuts, q3Country$Income.Group)
q5
head(q3Country)
q5
q3Country[190,]
q3Country[189,]
q3Country[188,]
q5
q3Country$cuts <- cut(q3Country$nrank,breaks=quantile(q3Country$nrank, by=.2))
q5 <- table(q3Country$cuts, q3Country$Income.Group)
q5
q3Country$cuts <- cut(q3Country$nrank,breaks=quantile(q3Country$nrank, seq(0, 1, 0.2)))
q5 <- table(q3Country$cuts, q3Country$Income.Group)
q5
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
str(BodyWeight)
?xyplot
library(lattice)
?xyplot
library(datasets)
library(ggplot2)
install.packages(ggplot2)
install.package(ggplot2)
install.packages(ggplot2)
install.packages(ggplot)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
data(airquality)
str airquality
str(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
class airquality$Month
class( airquality$Month)
data(airquality)
class( airquality$Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
setwd("C:/Users/Main/datasciencecoursera/Reproducible Research")
activityMonitoring <- read.table("activity.csv", sep=",", header=TRUE)
head( activityMonitoring)
tail( activityMonitoring)
setwd("C:/Users/Main/datasciencecoursera/Reproducible Research/RepData_PeerAssessment1")
activityMonitoring <- read.table("activity.csv", sep=",", header=TRUE)
tail( activityMonitoring)
missing <- activityMonitoring[steps=="NA"]
missing <- activityMonitoring[step=="NA"]
str(activityMonitoring)
missing <- activityMonitoring[step=="NA"]
activityMonitoring <- na.omit(activityMonitoring)
tail( activityMonitoring)
str(activityMonitoring)
activityMonitorByDate <- aggregate(activityMonitoring$steps, by=list(date=activityMonitoring$date), FUN=sum)
tail( activityMonitorByDate)
head( activityMonitorByDate)
hist(activityMonitorByDate)
hist(activityMonitorByDate)
hist.data.frame(activityMonitorByDate)
head( activityMonitorByDate)
str(activityMonitorByDate)
hist(activityMonitorByDate)
activityMonitorByDate <- aggregate(steps=activityMonitoring$steps, by=list(date=activityMonitoring$date), FUN=sum)
activityMonitorByDate <- aggregate(x=activityMonitoring$steps, by=list(date=activityMonitoring$date), FUN=sum)
head( activityMonitorByDate)
hist(activityMonitorByDate)
hist(activityMonitorByDate$x)
hist(activityMonitorByDate$date)
hist(activityMonitorByDate$x)
hist(activityMonitorByDate$x, breaks=activityMonitorByDate$date)
plot(activityMonitorByDate$date), activityMonitorByDate$x, pch = 4, xlab="Date", ylab="Year", main="Steps by Date", sub="Peer Assessment 1", type="l", col="white")
plot(activityMonitorByDate$date, activityMonitorByDate$x, pch = 4, xlab="Date", ylab="Year", main="Steps by Date", sub="Peer Assessment 1", type="l", col="white")
plot(activityMonitorByDate$date, activityMonitorByDate$x, pch = 4, xlab="Date", ylab="Steps", main="Steps by Date", sub="Peer Assessment 1", type="l", col="white")
plot(activityMonitorByDate$date, activityMonitorByDate$x, pch = 4, xlab="Date", ylab="Steps", main="Steps by Date", sub="Peer Assessment 1", type="h", col="white")
plot(activityMonitorByDate$date, activityMonitorByDate$x, pch = 4, xlab="Date", ylab="Steps", main="Steps by Date", sub="Peer Assessment 1", type="h", col="blue")
plot(activityMonitorByDate$date, activityMonitorByDate$x, pch = 4, xlab="Date", ylab="Steps", main="Steps by Date", sub="Peer Assessment 1", type="h", col="blue")
plot(activityMonitorByDate$date, activityMonitorByDate$x, pch = 4, xlab="Date", ylab="Steps", main="Steps by Date", sub="Peer Assessment 1", type="l", col="blue")
plot(activityMonitorByDate$date, activityMonitorByDate$x, pch = 4, xlab="Date", ylab="Steps", main="Steps by Date", sub="Peer Assessment 1", type="l", col="blue")
barplot(activityMonitorByDate$x, xlab="Year", ylab="Total PM2.5 Emissions",
main="Total Emissions of PM2.5 in US", col="gray", col.axis="black", col.lab="red")
barplot(activityMonitorByDate$x, xlab="Date", ylab="Steps", main="Steps by Date", col="gray", col.axis="black", col.lab="red")
barplot(activityMonitorByDate$x, xlab="Date", ylab="Steps", main="Steps by Date", col="black", col.axis="black", col.lab="red")
barplot(activityMonitorByDate$x, names.arg(activityMonitorByDate$date xlab="Date", ylab="Steps", main="Steps by Date", col="black", col.axis="black", col.lab="red")
barplot(activityMonitorByDate$x, names.arg=activityMonitorByDate$date, xlab="Date", ylab="Steps", main="Steps by Date", col="black", col.axis="black", col.lab="red")
barplot(activityMonitorByDate$x, names.arg=activityMonitorByDate$date, xlab="Date", ylab="Steps", main="Steps by Date", col="gray", col.axis="gray", col.lab="red")
barplot(activityMonitorByDate$x, names.arg=activityMonitorByDate$date, xlab="Date", ylab="Steps", main="Steps by Date", col="gray", col.axis="black", col.lab="red")
hist(activityMonitorByDate$x)
hist(activityMonitorByDate$x, breaks=activityMonitorByDate$date)
library(lattice)
histogram(~ activityMonitorByDate$x | activityMonitorByDate$date)
histogram(~ activityMonitorByDate$x )
histogram(activityMonitorByDate$x, data=activityMonitorByDate$date )
histogram(activityMonitorByDate$x, data=activityMonitorByDate$date, type="count" )
histogram(activityMonitorByDate$x, type="count" )
histogram(activityMonitorByDate$x, type="count", xlab="Steps", ylab="Day Count" )
histogram(activityMonitorByDate$x, type="count", xlab="Steps", ylab="Day Count", n=10 )
actMean <- aggregate(. ~ date, activityMonitorByDate$x, mean)
actMean <- aggregate(x=activityMonitoring$steps, by=list(date=activityMonitoring$date), FUN=mean)
actMean
actMean <- aggregate(x=activityMonitorByDate$x, by=list(date=activityMonitorByDate$date), FUN=mean)
actMean
actMean <- aggregate(x=activityMonitorByDate$x, FUN=mean)
actMean <- mean(x=activityMonitorByDate$x)
actMean
actMedian <- median(x=activityMonitorByDate$x)
actMedian
str(activityMonitoring)
activityMonitorByInterval <- aggregate(x=activityMonitoring$steps, by=list(date=activityMonitoring$interval), FUN=sum)
head( activityMonitorByInterval)
tail( activityMonitorByInterval)
plot(activityMonitorByInterval$interval, activityMonitorByInterval$x, pch = 4, xlab="Interval", ylab="Steps", main="Steps by 5 Minute Intervals", sub="Peer Assessment 1", type="l", col="blue")
str( activityMonitorByInterval)
activityMonitorByInterval <- aggregate(x=activityMonitoring$steps, by=list(interval=activityMonitoring$interval), FUN=sum)
plot(activityMonitorByInterval$interval, activityMonitorByInterval$x, pch = 4, xlab="Interval", ylab="Steps", main="Steps by 5 Minute Intervals", sub="Peer Assessment 1", type="l", col="blue")
actMax <- max(x=activityMonitorByInterval$x)
actMax
maxInterval <- activeMonitorByInterval[which(activityMonitorByInterval == actMax)]
maxInterval <- activityMonitorByInterval[which(activityMonitorByInterval$x == actMax)]
str( activityMonitorByInterval)
maxInterval <- activityMonitorByInterval[which(activityMonitorByInterval$x == actMax)]
maxInterval <- activityMonitorByInterval[, which(activityMonitorByInterval$x == actMax)]
actMax
maxInterval <- activityMonitorByInterval[, which(activityMonitorByInterval$x == 10927)]
str( activityMonitorByInterval)
maxInterval <- activityMonitorByInterval[, which(x == 10927)]
maxInterval
maxInterval <- activityMonitorByInterval[which(x == 10927)]
maxInterval
maxInterval <- activityMonitorByInterval[which(x == 10927), ]
maxInterval
maxInterval <- subset(activityMonitorByInterval, x == 10927)
maxInterval
maxInterval <- subset(activityMonitorByInterval, x == max(x=activityMonitorByInterval$x))
maxInterval
activityMonitorByInterval <- aggregate(x=activityMonitoring$steps, by=list(interval=activityMonitoring$interval), FUN=mean)
maxInterval <- subset(activityMonitorByInterval, x == max(x=activityMonitorByInterval$x))
maxInterval
plot(activityMonitorByInterval$interval, activityMonitorByInterval$x, pch = 4, xlab="Interval", ylab="Steps", main="Steps by 5 Minute Intervals", sub="Peer Assessment 1", type="l", col="blue")
activityMonitoring <- read.table("activity.csv", sep=",", header=TRUE)
activityMonitoring$steps[is.na(activityMonitoring$steps)] <- activityMonitorByInterval(activityMonitoring$interval)
activityMonitoring$steps[is.na(activityMonitoring$steps)] <- activityMonitorByInterval[activityMonitoring$interval]
activityMonitoring$steps[is.na(activityMonitoring$steps)] <- activityMonitorByInterval[interval==activityMonitoring$interval]
activityMonitoring$steps[is.na(activityMonitoring$steps)] <- activityMonitorByInterval[x==activityMonitoring$interval]
tmp <- activityMonitoring$steps[is.na(activityMonitoring$steps)]
tmp
tmp <- activityMonitoring$steps[is.na(activityMonitoring$steps), ]
tmp <- activityMonitoring$steps[, is.na(activityMonitoring$steps) ]
tmp <- subset(activityMonitoring, is.na(steps)
)
yMonitoring, is.na(steps))
tmp
tmp$steps <- activityMonitorByInterval$x[which interval=tmp$interval]
tmp$steps <- activityMonitorByInterval$x[(which interval=tmp$interval)]
tmp$steps <- activityMonitorByInterval[x, (which interval=tmp$interval)]
tmp$steps <- activityMonitorByInterval[x, which(activityMonitorByInterval$x=tmp$interval)]
tmp$steps <- activityMonitorByInterval[x, which(activityMonitorByInterval$x==tmp$interval)]
tmp$steps <- activityMonitorByInterval[x, which(activityMonitorByInterval$interval==tmp$interval)]
tmp$steps <- activityMonitorByInterval[x, which(interval==tmp$interval)]
str(tmp)
tmp$steps <- activityMonitorByInterval[which(interval==tmp$interval), ]
tmp$steps <- activityMonitorByInterval[which(interval==tmp$interval), 3]
str(activityMonitorByInterval)
tmp$steps <- activityMonitorByInterval[which(interval==tmp$interval), 3]
tmp$steps <- activityMonitorByInterval[which(interval==5), 3]
tmp$steps <- activityMonitorByInterval[ which(interval==tmp$interval), 3]
tmp$steps <- activityMonitorByInterval$x[ which(interval==tmp$interval)]
tmp$steps <- activityMonitorByInterval$x[ which(activityMonitorByInterval$interval==tmp$interval)]
tmp$steps
tmp <- subset(activityMonitoring, is.na(steps))
length(tmp)
nrow(tmp)
tmp$steps <- activityMonitorByInterval$x[ which(activityMonitorByInterval$interval==tmp$interval)]
nrow(activityMonitorByInterval)
tmp
nrow(tmp$steps)
nrow(tmp)
tmp[2304:2305, ]
tmp$steps[is.na(tmp$steps)] <- ave(tmp$steps, tmp$interval,
FUN=function(x) mean(x,
na.rm = T))[is.na(tmp$interval)]
tmp$steps[is.na(tmp$steps)] <- mean(tmp$steps, tmp$interval,
FUN=function(x) mean(x, na.rm = T))[is.na(tmp$steps)]
tmp$steps[is.na(tmp$steps)] <- ave(tmp$steps, tmp$interval, FUN=function(x) mean(x, na.rm = T))[is.na(tmp$steps)]
tmp$steps
tmp[2304:2305, ]
tail( activityMonitorByInterval)
xyplot(date ~ x | when, data = actMonitor2ByInterval, layout = c(2, 1))
library(lattice)
xyplot(date ~ x | when, data = actMonitor2ByInterval, layout = c(2, 1))
actMonitor <- read.table("activity.csv", sep=",", header=TRUE)
actMonitor2ByInterval <- aggregate(x=actMonitor2$steps, by=list(interval=actMonitor2$interval, when=actMonitor2$when), FUN=mean)
actMonitor2 <- actMonitor
actMonitor2ByInterval <- aggregate(x=actMonitor2$steps, by=list(interval=actMonitor2$interval, when=actMonitor2$when), FUN=mean)
actMonitor2$steps[is.na(actMonitor2$steps)] <- ave(actMonitor2$steps, actMonitor2$interval, FUN=function(x) mean(x, na.rm = T))[is.na(actMonitor2$steps)]
actMonitor2$when <- ifelse(weekdays(as.Date(actMonitor2$date), abbreviate=TRUE) == 'Sat'
| weekdays(as.Date(actMonitor2$date), abbreviate=TRUE) == 'Sun', 'weekend', 'weekday')
actMonitor2ByInterval <- aggregate(x=actMonitor2$steps, by=list(interval=actMonitor2$interval, when=actMonitor2$when), FUN=mean)
xyplot(date ~ x | when, data = actMonitor2ByInterval, layout = c(2, 1))
xyplot(x ~ interval | when, data = actMonitor2ByInterval, layout = c(2, 1))
xyplot(x ~ interval | when, data = actMonitor2ByInterval, layout = c(1, 2), type='l')
xyplot(x ~ interval | when, data = actMonitor2ByInterval, layout = c(1, 2), type='l', ylab="Number of Steps")
actMonitor <- read.table("activity.csv", sep=",", header=TRUE)
actMonitor1 <- na.omit(actMonitor)
actMonitor1ByDate <- aggregate(x=actMonitor1$steps, by=list(date=actMonitor1$date), FUN=sum)
histogram(actMonitor1ByDate$x, type="count", xlab="Steps", ylab="Day Count", n=16)
histogram(actMonitor1ByDate$x, type="count", xlab="Number of Steps", ylab="Day Count", n=16)
actMonitor1Mean <- mean(x=actMonitor1ByDate$x)
actMonitor1Mean
actMonitor1Median <- median(x=actMonitor1ByDate$x)
actMonitor1Median
actMonitor1ByInterval <- aggregate(x=actMonitor1$steps, by=list(interval=actMonitor1$interval), FUN=mean)
plot(actMonitor1ByInterval$interval, actMonitor1ByInterval$x, pch = 4, xlab="Interval", ylab="Steps", main="Steps by 5 Minute Intervals", sub="Peer Assessment 1", type="l", col="blue")
maxInterval <- subset(actMonitor1ByInterval, x == max(x=actMonitor1ByInterval$x))
maxInterval
actMonitor2 <- actMonitor
actMonitor2 <- actMonitor
actMonitor2$steps[is.na(actMonitor2$steps)] <- ave(actMonitor2$steps, actMonitor2$interval, FUN=function(x) mean(x, na.rm = T))[is.na(actMonitor2$steps)]
actMonitor2ByDate <- aggregate(x=actMonitor2$steps, by=list(date=actMonitor2$date), FUN=sum)
histogram(actMonitor2ByDate$x, type="count", xlab="Steps", ylab="Day Count", n=16, col="yellow")
actMonitor2Mean <- mean(x=actMonitor2ByDate$x)
actMonitor2Mean
actMonitor2Median <- median(x=actMonitor2ByDate$x)
actMonitor2Median
actMonitor2$when <- ifelse(weekdays(as.Date(actMonitor2$date), abbreviate=TRUE) == 'Sat'
| weekdays(as.Date(actMonitor2$date), abbreviate=TRUE) == 'Sun', 'weekend', 'weekday')
actMonitor2ByInterval <- aggregate(x=actMonitor2$steps, by=list(interval=actMonitor2$interval, when=actMonitor2$when), FUN=mean)
xyplot(x ~ interval | when, data = actMonitor2ByInterval, layout = c(1, 2), type='l', ylab="Number of Steps")
```
library(lattice)
actMonitor <- read.table("activity.csv", sep=",", header=TRUE)
actMonitor1 <- na.omit(actMonitor)
actMonitor1ByDate <- aggregate(x=actMonitor1$steps, by=list(date=actMonitor1$date), FUN=sum)
histogram(actMonitor1ByDate$x, type="count", xlab="Number of Steps", ylab="Day Count", n=16)
actMonitor1Mean <- mean(x=actMonitor1ByDate$x)
actMonitor1Median <- median(x=actMonitor1ByDate$x)
actMonitor1ByInterval <- aggregate(x=actMonitor1$steps, by=list(interval=actMonitor1$interval), FUN=mean)
plot(actMonitor1ByInterval$interval, actMonitor1ByInterval$x,
pch = 4, xlab="Interval", ylab="Steps",
main="Steps by 5 Minute Intervals", sub="Peer Assessment 1",
type="l", col="blue")
maxInterval <- subset(actMonitor1ByInterval, x == max(x=actMonitor1ByInterval$x))
str(maxInterval)
maxInterval.interval <- maxInterval[1,1]
maxInterval.steps <- maxInterval[1,1]
maxInterval.interval
maxInterval.steps
maxInterval.steps <- maxInterval[1,2]
maxInterval.steps
